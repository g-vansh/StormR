df <- df[1:40, ]
df_list <- split(df, df$StormID)
df_list <- df_list[1:4]
# Run the StormR::calculate_cyclone_energy() for each storm
cyclone_energy_list <- lapply(df_list, calculate_cyclone_energy)
#' Calculate the Accumulated Cyclone Energy of a Storm
#'
#' This function computes the accumulated cyclone energy of a given storm.
#'
#' @param df A dataframe containing the storm data for a single storm.
#' @return A numeric value representing the accumulated cyclone energy of the storm.
#' @export
calculate_cyclone_energy <- function(df){
# Create a new dataframe to store the collapsed data
df_collapsed <- data.frame()
# Get the date and time of the first observation
first_time <- as.POSIXct(paste(toString(df$Date[1]), toString(df$Time[1]), sep = ""), format = "%Y%m%d%H%M")
# Create a list of maximum sustained wind every 6 hours (Use MaximumWind column)
max_winds <- list()
# Create a temporary 6 hour wind list
temp_winds <- list()
# Add the first wind speed to the temporary list
temp_winds <- c(temp_winds, df$MaximumWind[1])
# Loop through each row, and keep only the times that are 6 hours apart
for(i in 2:nrow(df)){
# Append information to temp_winds
temp_winds <- c(temp_winds, df$MaximumWind[i])
# Get the date and time of the current observation
current_time <- as.POSIXct(paste(toString(df$Date[i]), toString(df$Time[i]), sep = ""), format = "%Y%m%d%H%M")
# Calculate the time difference between the current observation and the first observation
time_diff <- as.numeric(difftime(current_time, first_time, units = "mins"))
# If time_diff is NA, set it to 0
if(is.na(time_diff)){
time_diff <- 0
}
# If the time difference is a multiple of 6, keep the row
if(time_diff >= 360){
max_winds <- c(max_winds, max(unlist(temp_winds)))
temp_winds <- list()
first_time <- current_time
} else if(i == nrow(df)){
print(temp_winds)
max_winds <- c(max_winds, max(unlist(temp_winds)))
print(max_winds)
}
}
# Keep only the max_winds that are greater than 34 knots
# Loop through each wind speed
for(i in 1:length(max_winds)){
# If the wind speed is less than 34 knots, set it to 0
if(max_winds[i] < 35){
max_winds[i] <- 0
}
}
# Initialise energy sum
energy_sum <- 0
# Loop through each wind speed
for(i in 1:length(max_winds)){
energy <- max_winds[[i]] ^ 2
# Add the energy to the energy sum
energy_sum <- energy_sum + energy
}
# Calculate the cyclone energy
cyclone_energy <- energy_sum / 10000
# Return the cyclone energy
return(cyclone_energy)
}
library(StormR)
# Split the dataframe into a list of dataframes where each dataframe is a unique StormID
df <- StormR::hurdat
df <- df[1:40, ]
df_list <- split(df, df$StormID)
df_list <- df_list[1:4]
# Run the StormR::calculate_cyclone_energy() for each storm
cyclone_energy_list <- lapply(df_list, calculate_cyclone_energy)
#' Calculate the Accumulated Cyclone Energy of a Storm
#'
#' This function computes the accumulated cyclone energy of a given storm.
#'
#' @param df A dataframe containing the storm data for a single storm.
#' @return A numeric value representing the accumulated cyclone energy of the storm.
#' @export
calculate_cyclone_energy <- function(df){
# Create a new dataframe to store the collapsed data
df_collapsed <- data.frame()
# Get the date and time of the first observation
first_time <- as.POSIXct(paste(toString(df$Date[1]), toString(df$Time[1]), sep = ""), format = "%Y%m%d%H%M")
# Create a list of maximum sustained wind every 6 hours (Use MaximumWind column)
max_winds <- list()
# Create a temporary 6 hour wind list
temp_winds <- list()
# Add the first wind speed to the temporary list
temp_winds <- c(temp_winds, df$MaximumWind[1])
# Loop through each row, and keep only the times that are 6 hours apart
for(i in 2:nrow(df)){
# Append information to temp_winds
temp_winds <- c(temp_winds, df$MaximumWind[i])
# Get the date and time of the current observation
current_time <- as.POSIXct(paste(toString(df$Date[i]), toString(df$Time[i]), sep = ""), format = "%Y%m%d%H%M")
# Calculate the time difference between the current observation and the first observation
time_diff <- as.numeric(difftime(current_time, first_time, units = "mins"))
# If time_diff is NA, set it to 0
if(is.na(time_diff)){
time_diff <- 0
}
# If the time difference is a multiple of 6, keep the row
if(time_diff >= 360){
max_winds <- c(max_winds, max(unlist(temp_winds)))
temp_winds <- list()
first_time <- current_time
} else if(i == nrow(df)){
print(temp_winds)
print(df$StormID)
max_winds <- c(max_winds, max(unlist(temp_winds)))
print(max_winds)
}
}
# Keep only the max_winds that are greater than 34 knots
# Loop through each wind speed
for(i in 1:length(max_winds)){
# If the wind speed is less than 34 knots, set it to 0
if(max_winds[i] < 35){
max_winds[i] <- 0
}
}
# Initialise energy sum
energy_sum <- 0
# Loop through each wind speed
for(i in 1:length(max_winds)){
energy <- max_winds[[i]] ^ 2
# Add the energy to the energy sum
energy_sum <- energy_sum + energy
}
# Calculate the cyclone energy
cyclone_energy <- energy_sum / 10000
# Return the cyclone energy
return(cyclone_energy)
}
library(StormR)
# Split the dataframe into a list of dataframes where each dataframe is a unique StormID
df <- StormR::hurdat
df <- df[1:40, ]
df_list <- split(df, df$StormID)
df_list <- df_list[1:4]
# Run the StormR::calculate_cyclone_energy() for each storm
cyclone_energy_list <- lapply(df_list, calculate_cyclone_energy)
#' Calculate the Accumulated Cyclone Energy of a Storm
#'
#' This function computes the accumulated cyclone energy of a given storm.
#'
#' @param df A dataframe containing the storm data for a single storm.
#' @return A numeric value representing the accumulated cyclone energy of the storm.
#' @export
calculate_cyclone_energy <- function(df){
# Create a new dataframe to store the collapsed data
df_collapsed <- data.frame()
# Get the date and time of the first observation
first_time <- as.POSIXct(paste(toString(df$Date[1]), toString(df$Time[1]), sep = ""), format = "%Y%m%d%H%M")
# Create a list of maximum sustained wind every 6 hours (Use MaximumWind column)
max_winds <- list()
# Create a temporary 6 hour wind list
temp_winds <- list()
# Add the first wind speed to the temporary list
temp_winds <- c(temp_winds, df$MaximumWind[1])
# Loop through each row, and keep only the times that are 6 hours apart
for(i in 2:nrow(df)){
# Append information to temp_winds
temp_winds <- c(temp_winds, df$MaximumWind[i])
# Get the date and time of the current observation
current_time <- as.POSIXct(paste(toString(df$Date[i]), toString(df$Time[i]), sep = ""), format = "%Y%m%d%H%M")
# Calculate the time difference between the current observation and the first observation
time_diff <- as.numeric(difftime(current_time, first_time, units = "mins"))
# If time_diff is NA, set it to 0
if(is.na(time_diff)){
time_diff <- 0
}
# If the time difference is a multiple of 6, keep the row
if(time_diff >= 360){
max_winds <- c(max_winds, max(unlist(temp_winds)))
temp_winds <- list()
first_time <- current_time
} else if(i == nrow(df)){
print(unlist(temp_winds))
print(df$StormID)
max_winds <- c(max_winds, max(unlist(temp_winds)))
print(max_winds)
}
}
# Keep only the max_winds that are greater than 34 knots
# Loop through each wind speed
for(i in 1:length(max_winds)){
# If the wind speed is less than 34 knots, set it to 0
if(max_winds[i] < 35){
max_winds[i] <- 0
}
}
# Initialise energy sum
energy_sum <- 0
# Loop through each wind speed
for(i in 1:length(max_winds)){
energy <- max_winds[[i]] ^ 2
# Add the energy to the energy sum
energy_sum <- energy_sum + energy
}
# Calculate the cyclone energy
cyclone_energy <- energy_sum / 10000
# Return the cyclone energy
return(cyclone_energy)
}
library(StormR)
# Split the dataframe into a list of dataframes where each dataframe is a unique StormID
df <- StormR::hurdat
df <- df[1:40, ]
df_list <- split(df, df$StormID)
df_list <- df_list[1:4]
# Run the StormR::calculate_cyclone_energy() for each storm
cyclone_energy_list <- lapply(df_list, calculate_cyclone_energy)
#' Calculate the Accumulated Cyclone Energy of a Storm
#'
#' This function computes the accumulated cyclone energy of a given storm.
#'
#' @param df A dataframe containing the storm data for a single storm.
#' @return A numeric value representing the accumulated cyclone energy of the storm.
#' @export
calculate_cyclone_energy <- function(df){
# Create a new dataframe to store the collapsed data
df_collapsed <- data.frame()
# Get the date and time of the first observation
first_time <- as.POSIXct(paste(toString(df$Date[1]), toString(df$Time[1]), sep = ""), format = "%Y%m%d%H%M")
# Create a list of maximum sustained wind every 6 hours (Use MaximumWind column)
max_winds <- list()
# Create a temporary 6 hour wind list
temp_winds <- list()
# Add the first wind speed to the temporary list
temp_winds <- c(temp_winds, df$MaximumWind[1])
nrow(df)
# Loop through each row, and keep only the times that are 6 hours apart
for(i in 2:nrow(df)){
# Append information to temp_winds
temp_winds <- c(temp_winds, df$MaximumWind[i])
# Get the date and time of the current observation
current_time <- as.POSIXct(paste(toString(df$Date[i]), toString(df$Time[i]), sep = ""), format = "%Y%m%d%H%M")
# Calculate the time difference between the current observation and the first observation
time_diff <- as.numeric(difftime(current_time, first_time, units = "mins"))
# If time_diff is NA, set it to 0
if(is.na(time_diff)){
time_diff <- 0
}
# If the time difference is a multiple of 6, keep the row
if(time_diff >= 360){
max_winds <- c(max_winds, max(unlist(temp_winds)))
temp_winds <- list()
first_time <- current_time
} else if(i == nrow(df)){
print(unlist(temp_winds))
print(df$StormID)
max_winds <- c(max_winds, max(unlist(temp_winds)))
print(max_winds)
}
}
# Keep only the max_winds that are greater than 34 knots
# Loop through each wind speed
for(i in 1:length(max_winds)){
# If the wind speed is less than 34 knots, set it to 0
if(max_winds[i] < 35){
max_winds[i] <- 0
}
}
# Initialise energy sum
energy_sum <- 0
# Loop through each wind speed
for(i in 1:length(max_winds)){
energy <- max_winds[[i]] ^ 2
# Add the energy to the energy sum
energy_sum <- energy_sum + energy
}
# Calculate the cyclone energy
cyclone_energy <- energy_sum / 10000
# Return the cyclone energy
return(cyclone_energy)
}
library(StormR)
# Split the dataframe into a list of dataframes where each dataframe is a unique StormID
df <- StormR::hurdat
df <- df[1:40, ]
df_list <- split(df, df$StormID)
df_list <- df_list[1:4]
# Run the StormR::calculate_cyclone_energy() for each storm
cyclone_energy_list <- lapply(df_list, calculate_cyclone_energy)
#' Calculate the Accumulated Cyclone Energy of a Storm
#'
#' This function computes the accumulated cyclone energy of a given storm.
#'
#' @param df A dataframe containing the storm data for a single storm.
#' @return A numeric value representing the accumulated cyclone energy of the storm.
#' @export
calculate_cyclone_energy <- function(df){
# Create a new dataframe to store the collapsed data
df_collapsed <- data.frame()
# Get the date and time of the first observation
first_time <- as.POSIXct(paste(toString(df$Date[1]), toString(df$Time[1]), sep = ""), format = "%Y%m%d%H%M")
# Create a list of maximum sustained wind every 6 hours (Use MaximumWind column)
max_winds <- list()
# Create a temporary 6 hour wind list
temp_winds <- list()
# Add the first wind speed to the temporary list
temp_winds <- c(temp_winds, df$MaximumWind[1])
print(nrow(df))
# Loop through each row, and keep only the times that are 6 hours apart
for(i in 2:nrow(df)){
# Append information to temp_winds
temp_winds <- c(temp_winds, df$MaximumWind[i])
# Get the date and time of the current observation
current_time <- as.POSIXct(paste(toString(df$Date[i]), toString(df$Time[i]), sep = ""), format = "%Y%m%d%H%M")
# Calculate the time difference between the current observation and the first observation
time_diff <- as.numeric(difftime(current_time, first_time, units = "mins"))
# If time_diff is NA, set it to 0
if(is.na(time_diff)){
time_diff <- 0
}
# If the time difference is a multiple of 6, keep the row
if(time_diff >= 360){
max_winds <- c(max_winds, max(unlist(temp_winds)))
temp_winds <- list()
first_time <- current_time
} else if(i == nrow(df)){
print(unlist(temp_winds))
print(df$StormID)
max_winds <- c(max_winds, max(unlist(temp_winds)))
print(max_winds)
}
}
# Keep only the max_winds that are greater than 34 knots
# Loop through each wind speed
for(i in 1:length(max_winds)){
# If the wind speed is less than 34 knots, set it to 0
if(max_winds[i] < 35){
max_winds[i] <- 0
}
}
# Initialise energy sum
energy_sum <- 0
# Loop through each wind speed
for(i in 1:length(max_winds)){
energy <- max_winds[[i]] ^ 2
# Add the energy to the energy sum
energy_sum <- energy_sum + energy
}
# Calculate the cyclone energy
cyclone_energy <- energy_sum / 10000
# Return the cyclone energy
return(cyclone_energy)
}
library(StormR)
# Split the dataframe into a list of dataframes where each dataframe is a unique StormID
df <- StormR::hurdat
df <- df[1:40, ]
df_list <- split(df, df$StormID)
df_list <- df_list[1:4]
# Run the StormR::calculate_cyclone_energy() for each storm
cyclone_energy_list <- lapply(df_list, calculate_cyclone_energy)
#' Calculate the Accumulated Cyclone Energy of a Storm
#'
#' This function computes the accumulated cyclone energy of a given storm.
#'
#' @param df A dataframe containing the storm data for a single storm.
#' @return A numeric value representing the accumulated cyclone energy of the storm.
#' @export
calculate_cyclone_energy <- function(df){
# Create a new dataframe to store the collapsed data
df_collapsed <- data.frame()
# Get the date and time of the first observation
first_time <- as.POSIXct(paste(toString(df$Date[1]), toString(df$Time[1]), sep = ""), format = "%Y%m%d%H%M")
# Create a list of maximum sustained wind every 6 hours (Use MaximumWind column)
max_winds <- list()
# Create a temporary 6 hour wind list
temp_winds <- list()
# Add the first wind speed to the temporary list
temp_winds <- c(temp_winds, df$MaximumWind[1])
# If df only has one row, max_winds is temp_winds
if(nrow(df) == 1){
max_winds <- temp_winds
} else {
# Loop through each row, and keep only the times that are 6 hours apart
for(i in 2:nrow(df)){
# Append information to temp_winds
temp_winds <- c(temp_winds, df$MaximumWind[i])
# Get the date and time of the current observation
current_time <- as.POSIXct(paste(toString(df$Date[i]), toString(df$Time[i]), sep = ""), format = "%Y%m%d%H%M")
# Calculate the time difference between the current observation and the first observation
time_diff <- as.numeric(difftime(current_time, first_time, units = "mins"))
# If time_diff is NA, set it to 0
if(is.na(time_diff)){
time_diff <- 0
}
# If the time difference is a multiple of 6, keep the row
if(time_diff >= 360){
max_winds <- c(max_winds, max(unlist(temp_winds)))
temp_winds <- list()
first_time <- current_time
} else if(i == nrow(df)){
max_winds <- c(max_winds, max(unlist(temp_winds)))
}
}
}
# Keep only the max_winds that are greater than 34 knots
# Loop through each wind speed
for(i in 1:length(max_winds)){
# If the wind speed is less than 34 knots, set it to 0
if(max_winds[i] < 35){
max_winds[i] <- 0
}
}
# Initialise energy sum
energy_sum <- 0
# Loop through each wind speed
for(i in 1:length(max_winds)){
energy <- max_winds[[i]] ^ 2
# Add the energy to the energy sum
energy_sum <- energy_sum + energy
}
# Calculate the cyclone energy
cyclone_energy <- energy_sum / 10000
# Return the cyclone energy
return(cyclone_energy)
}
library(StormR)
# Split the dataframe into a list of dataframes where each dataframe is a unique StormID
df <- StormR::hurdat
df <- df[1:40, ]
df_list <- split(df, df$StormID)
df_list <- df_list[1:4]
# Run the StormR::calculate_cyclone_energy() for each storm
cyclone_energy_list <- lapply(df_list, calculate_cyclone_energy)
cyclone_energy_list
library(usethis)
dat <- read.csv("data-raw/hurdat-raw.txt", header= FALSE)
# Convert the second column to string
dat[,2] <- as.character(dat[,2])
#We will initialize the processed data
hurdat <- data.frame(matrix(NA, 0, ncol(dat)+2))
colnames(hurdat) <- c("StormID", "StormName", "Date", "Time",
"RecordIdentifier", "SystemStatus", "Latitude",
"Longitude", "MaximumWind", "MinimumPressure", "34NE",
"34SE", "34SW", "34NW", "50NE", "50SE", "50SW",
"50NW", "64NE", "64SE", "64SW", "64NW", "RadiusMaxWind")
# counter for the row of hurdat
k <- 0
# loop over rows of raw dataset and extract the necessary data
for(i in 1:nrow(dat)){
# extract the current row of raw data
current_row <- dat[i,]
# determine if this row is a StormID
if( grepl("[a-zA-Z]", current_row[1,1])){
# if so, update the storm_id and storm_name
storm_id <- current_row[1,1]
storm_name <- gsub("\\s+", "", current_row[1,2])
} else {
# otherwise update the counter because we are adding data to
# our processed hurdat data.frame. Then, write to the next row
k <- k + 1
hurdat[k,] <- cbind(storm_id, storm_name, current_row )
}
}
#We have now formatted the dataset into a data frame. We need to finish
#cleaning up the data.
#Replace missing value codes with NAs
for(row in 1:nrow(hurdat)){
for(column in 1:ncol(hurdat)){
if (is.na(hurdat[row, column]) |
nchar(gsub("\\s", "", hurdat[row, column]))==0){
hurdat[row, column] <- NA
}
}
}
#Convert latitude and longitude columns to degrees north and
#degrees east respectively.
for(i in 1:nrow(hurdat)){
#Convert latitude to degrees north
current_latitude <- hurdat$Latitude[i]
if(grepl("S", current_latitude)){
new_latitude <- -1 * as.numeric(gsub("[A-Za-z]", "", current_latitude))
} else {
new_latitude <- as.numeric(gsub("[A-Za-z]", "", current_latitude))
}
hurdat$Latitude[i] <- new_latitude
#Convert latitude to degrees east
current_longitude <- hurdat$Longitude[i]
if(grepl("W", current_longitude)){
new_longitude <- -1 * as.numeric(gsub("[A-Za-z]", "", current_longitude))
} else {
new_longitude <- as.numeric(gsub("[A-Za-z]", "", current_longitude))
}
hurdat$Longitude[i] <- new_longitude
}
# Convert Latitude and Longitude to numeric
hurdat$Latitude <- as.numeric(hurdat$Latitude)
hurdat$Longitude <- as.numeric(hurdat$Longitude)
# Convert Date and Time to string
hurdat$Date <- as.character(hurdat$Date)
hurdat$Time <- as.character(hurdat$Time)
# Rename this file to the name of the dataset
write.csv(hurdat, "data-raw/hurdat.csv")
usethis::use_data(hurdat, overwrite = TRUE)
StormR::hurdat
d <- StormR::hurdat
devtools::document()
rm(list = c("calculate_cyclone_energy"))
devtools::document()
devtools::check()
devtools::build()
install.packages("G:/Other computers/My PC/Desktop/Cornell/Classes/Current/STSCI 4520/StormR_0.0.0.9000.tar.gz", repos = NULL, type = "source")
