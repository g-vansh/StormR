b <- (t(r) %*% z) / (t(r_old) %*% z_old)
p <- z + b[1] * p
}
return(x)
}
covmat_sparse <- as(covmat,  "sparseMatrix")
mat_sparse <- as(mat,  "sparseMatrix")
c1 <- PrecondCG(covmat_sparse, X[,1], mat_sparse)
PrecondCG <- function(A, b, mat) {
x <- rep(0, ncol(A))
r <- b - A %*% x
z <- solve(mat) %*% r
p <- z
count <- 0
for (i in 1:length(b)) {
count <- count + 1
Ap <- A %*% p
alpha <- (t(r) %*% z) / (t(p) %*% Ap)
x <- x + alpha[1] * p
r_old <- r
r <- r - alpha[1] * Ap
rs <- t(r) %*% r
print(rs)
if (rs < 1e-12) {
print(count)
break
}
z_old <- z
z <- solve(mat) %*% r
b <- (t(r) %*% z) / (t(r_old) %*% z_old)
p <- z + b[1] * p
}
return(x)
}
covmat_sparse <- as(covmat,  "sparseMatrix")
mat_sparse <- as(mat,  "sparseMatrix")
c1 <- PrecondCG(covmat_sparse, X[,1], mat_sparse)
mat <- matrix(0, nrow = nrow(covmat), ncol = ncol(covmat))
for (i in 0:39) {
ind_1 <- (i * 100 + 1)
ind_2 <- ind_1 + 99
mat[ind_1:ind_2, ind_1:ind_2] <- solve(covmat[ind_1:ind_2, ind_1:ind_2])
}
mat[1:5,1:5]
PrecondCG <- function(A, b, mat) {
x <- rep(0, ncol(A))
r <- b - A %*% x
z <- solve(mat) %*% r
p <- z
count <- 0
for (i in 1:length(b)) {
count <- count + 1
Ap <- A %*% p
alpha <- (t(r) %*% z) / (t(p) %*% Ap)
x <- x + alpha[1] * p
r_old <- r
r <- r - alpha[1] * Ap
rs <- (t(r) %*% r)[1,1]
print(rs)
if (rs < 10^-12) {
print(count)
break
}
z_old <- z
z <- solve(mat) %*% r
b <- (t(r) %*% z) / (t(r_old) %*% z_old)
p <- z + b[1] * p
}
return(x)
}
covmat_sparse <- as(covmat,  "sparseMatrix")
mat_sparse <- as(mat,  "sparseMatrix")
c1 <- PrecondCG(covmat_sparse, X[,1], mat_sparse)
PrecondCG <- function(A, b, mat) {
n <- ncol(A)
x <- rep(0, n)
r <- b - A %*% x
z <- solve(mat, r)
p <- z
count <- 0
mat_inv <- solve(mat)
for (i in 1:n) {
count <- count + 1
Ap <- A %*% p
alpha <- crossprod(r, z) / crossprod(Ap, p)
x <- x + alpha * p
r <- r - alpha * Ap
rs <- crossprod(r, r)
if (rs < 1e-12) {
break
}
z <- mat_inv %*% r
b <- crossprod(r, z) / crossprod(r - alpha * Ap, z)
p <- z + b * p
}
return(x)
}
# PrecondCG <- function(A, b, mat) {
#   x <- rep(0, ncol(A))
#   r <- b - A %*% x
#   z <- solve(mat) %*% r
#   p <- z
#   count <- 0
#   for (i in 1:length(b)) {
#      count <- count + 1
#      Ap <- A %*% p
#      alpha <- (t(r) %*% z) / (t(p) %*% Ap)
#      x <- x + alpha[1] * p
#      r_old <- r
#      r <- r - alpha[1] * Ap
#      rs <- (t(r) %*% r)[1,1]
#      print(rs)
#      if (rs < 10^-12) {
#         print(count)
#         break
#      }
#      z_old <- z
#      z <- solve(mat) %*% r
#      b <- (t(r) %*% z) / (t(r_old) %*% z_old)
#      p <- z + b[1] * p
#   }
#   return(x)
# }
covmat_sparse <- as(covmat,  "sparseMatrix")
mat_sparse <- as(mat,  "sparseMatrix")
c1 <- PrecondCG(covmat_sparse, X[,1], mat_sparse)
PrecondCG <- function(A, b, mat) {
n <- ncol(A)
x <- rep(0, n)
r <- b - A %*% x
z <- solve(mat, r)
p <- z
count <- 0
mat_inv <- solve(mat)
for (i in 1:n) {
count <- count + 1
Ap <- A %*% p
alpha <- crossprod(r, z) / crossprod(Ap, p)
x <- x + alpha[1] * p
r <- r - alpha[1] * Ap
rs <- crossprod(r, r)
print(rs)
if (rs < 1e-12) {
print(count)
break
}
z <- mat_inv %*% r
b <- crossprod(r, z) / crossprod(r - alpha * Ap, z)
p <- z + b[1] * p
}
return(x)
}
# PrecondCG <- function(A, b, mat) {
#   x <- rep(0, ncol(A))
#   r <- b - A %*% x
#   z <- solve(mat) %*% r
#   p <- z
#   count <- 0
#   for (i in 1:length(b)) {
#      count <- count + 1
#      Ap <- A %*% p
#      alpha <- (t(r) %*% z) / (t(p) %*% Ap)
#      x <- x + alpha[1] * p
#      r_old <- r
#      r <- r - alpha[1] * Ap
#      rs <- (t(r) %*% r)[1,1]
#      print(rs)
#      if (rs < 10^-12) {
#         print(count)
#         break
#      }
#      z_old <- z
#      z <- solve(mat) %*% r
#      b <- (t(r) %*% z) / (t(r_old) %*% z_old)
#      p <- z + b[1] * p
#   }
#   return(x)
# }
covmat_sparse <- as(covmat,  "sparseMatrix")
mat_sparse <- as(mat,  "sparseMatrix")
c1 <- PrecondCG(covmat_sparse, X[,1], mat_sparse)
mat <- matrix(0, nrow = nrow(covmat), ncol = ncol(covmat))
for (i in 0:39) {
ind_1 <- (i * 100 + 1)
ind_2 <- ind_1 + 99
mat[ind_1:ind_2, ind_1:ind_2] <- solve(covmat[ind_1:ind_2, ind_1:ind_2])
}
mat[1:5,1:5]
PrecondCG <- function(A, b, mat) {
n <- ncol(A)
x <- rep(0, n)
r <- b - A %*% x
z <- solve(mat, r)
p <- z
count <- 0
mat_inv <- solve(mat)
for (i in 1:n) {
count <- count + 1
Ap <- A %*% p
alpha <- crossprod(r, z) / crossprod(Ap, p)
x <- x + alpha[1] * p
r <- r - alpha[1] * Ap
rs <- crossprod(r, r)[1,1]
print(rs)
if (rs < 1e-12) {
print(count)
break
}
z <- mat_inv %*% r
b <- crossprod(r, z) / crossprod(r - alpha * Ap, z)
p <- z + b[1] * p
}
return(x)
}
# PrecondCG <- function(A, b, mat) {
#   x <- rep(0, ncol(A))
#   r <- b - A %*% x
#   z <- solve(mat) %*% r
#   p <- z
#   count <- 0
#   for (i in 1:length(b)) {
#      count <- count + 1
#      Ap <- A %*% p
#      alpha <- (t(r) %*% z) / (t(p) %*% Ap)
#      x <- x + alpha[1] * p
#      r_old <- r
#      r <- r - alpha[1] * Ap
#      rs <- (t(r) %*% r)[1,1]
#      print(rs)
#      if (rs < 10^-12) {
#         print(count)
#         break
#      }
#      z_old <- z
#      z <- solve(mat) %*% r
#      b <- (t(r) %*% z) / (t(r_old) %*% z_old)
#      p <- z + b[1] * p
#   }
#   return(x)
# }
covmat_sparse <- as(covmat,  "sparseMatrix")
mat_sparse <- as(mat,  "sparseMatrix")
c1 <- PrecondCG(covmat_sparse, X[,1], mat_sparse)
PrecondCG <- function(A, b, mat) {
n <- ncol(A)
x <- rep(0, n)
r <- b - A %*% x
z <- solve(mat, r)
p <- z
count <- 0
mat_inv <- solve(mat)
for (i in 1:n) {
count <- count + 1
Ap <- A %*% p
alpha <- crossprod(r, z) / crossprod(Ap, p)
x <- x + alpha[1] * p
r <- r - alpha[1] * Ap
rs <- crossprod(r, r)[1,1]
print(rs)
if (rs < 1e-12) {
print(count)
break
}
z <- mat_inv %*% r
b <- crossprod(t(r), z) / crossprod(r - alpha * Ap, z)
p <- z + b[1] * p
}
return(x)
}
# PrecondCG <- function(A, b, mat) {
#   x <- rep(0, ncol(A))
#   r <- b - A %*% x
#   z <- solve(mat) %*% r
#   p <- z
#   count <- 0
#   for (i in 1:length(b)) {
#      count <- count + 1
#      Ap <- A %*% p
#      alpha <- (t(r) %*% z) / (t(p) %*% Ap)
#      x <- x + alpha[1] * p
#      r_old <- r
#      r <- r - alpha[1] * Ap
#      rs <- (t(r) %*% r)[1,1]
#      print(rs)
#      if (rs < 10^-12) {
#         print(count)
#         break
#      }
#      z_old <- z
#      z <- solve(mat) %*% r
#      b <- (t(r) %*% z) / (t(r_old) %*% z_old)
#      p <- z + b[1] * p
#   }
#   return(x)
# }
covmat_sparse <- as(covmat,  "sparseMatrix")
mat_sparse <- as(mat,  "sparseMatrix")
c1 <- PrecondCG(covmat_sparse, X[,1], mat_sparse)
PrecondCG <- function(A, b, mat) {
n <- ncol(A)
x <- rep(0, n)
r <- b - A %*% x
z <- solve(mat, r)
p <- z
count <- 0
mat_inv <- solve(mat)
for (i in 1:n) {
count <- count + 1
Ap <- A %*% p
alpha <- crossprod(r, z) / crossprod(Ap, p)
x <- x + alpha[1] * p
r_old <- r
r <- r - alpha[1] * Ap
rs <- crossprod(r, r)[1,1]
print(rs)
if (rs < 1e-12) {
print(count)
break
}
z_old <- z
z <- mat_inv %*% r
b <- (t(r) %*% z) / (t(r_old) %*% z_old)
p <- z + b[1] * p
}
return(x)
}
# PrecondCG <- function(A, b, mat) {
#   x <- rep(0, ncol(A))
#   r <- b - A %*% x
#   z <- solve(mat) %*% r
#   p <- z
#   count <- 0
#   for (i in 1:length(b)) {
#      count <- count + 1
#      Ap <- A %*% p
#      alpha <- (t(r) %*% z) / (t(p) %*% Ap)
#      x <- x + alpha[1] * p
#      r_old <- r
#      r <- r - alpha[1] * Ap
#      rs <- (t(r) %*% r)[1,1]
#      print(rs)
#      if (rs < 10^-12) {
#         print(count)
#         break
#      }
#      z_old <- z
#      z <- solve(mat) %*% r
#      b <- (t(r) %*% z) / (t(r_old) %*% z_old)
#      p <- z + b[1] * p
#   }
#   return(x)
# }
covmat_sparse <- as(covmat,  "sparseMatrix")
mat_sparse <- as(mat,  "sparseMatrix")
c1 <- PrecondCG(covmat_sparse, X[,1], mat_sparse)
c2 <- PrecondCG(covmat_sparse, X[,2], mat_sparse)
LinearCG <- function(A, b) {
x <- rep(0, ncol(A))
r <- b - A %*% x
p <- r
rsold <- t(r) %*% r
count <- 0
for (i in 1:length(b)) {
count <- count + 1
Ap <- A %*% p
alpha <- rsold / (t(p) %*% Ap)
x <- x + alpha[1] * p
r <- r - alpha[1] * Ap
rsnew <- t(r) %*% r
if (rsnew < 10^-12) {
print(count)
break
}
p <- r + (rsnew / rsold)[1] * p
rsold <- rsnew
}
return(x)
}
c1 <- LinearCG(covmat, X[,1])
c2 <- LinearCG(covmat, X[,2])
c3 <- LinearCG(covmat, X[,3])
c4 <- LinearCG(covmat, X[,4])
W <- cbind(c1, c2, c3, c4)
b <- solve(t(X) %*% W) %*% t(W) %*% y
b
PrecondCG <- function(A, b, mat) {
n <- ncol(A)
x <- rep(0, n)
r <- b - A %*% x
z <- solve(mat, r)
p <- z
count <- 0
mat_inv <- solve(mat)
for (i in 1:n) {
count <- count + 1
Ap <- A %*% p
alpha <- crossprod(r, z) / crossprod(Ap, p)
x <- x + alpha[1] * p
r_old <- r
r <- r - alpha[1] * Ap
rs <- crossprod(r, r)[1,1]
if (rs < 10^-12) {
print(count)
break
}
z_old <- z
z <- mat_inv %*% r
b <- (t(r) %*% z) / (t(r_old) %*% z_old)
p <- z + b[1] * p
}
return(x)
}
covmat_sparse <- as(covmat,  "sparseMatrix")
mat_sparse <- as(mat,  "sparseMatrix")
c1 <- PrecondCG(covmat_sparse, X[,1], mat_sparse)
PrecondCG <- function(A, b, mat) {
n <- ncol(A)
x <- rep(0, n)
r <- b - A %*% x
z <- solve(mat, r)
p <- z
count <- 0
mat_inv <- solve(mat)
for (i in 1:n) {
count <- count + 1
Ap <- A %*% p
alpha <- crossprod(r, z) / crossprod(Ap, p)
x <- x + alpha[1] * p
r_old <- r
r <- r - alpha[1] * Ap
rs <- crossprod(r, r)[1,1]
if (rs < 10^-12) {
print(count)
break
}
z_old <- z
z <- mat_inv %*% r
b <- (t(r) %*% z) / (t(r_old) %*% z_old)
p <- z + b[1] * p
}
return(x)
}
library(Matrix)
covmat_sparse <- as(covmat,  "sparseMatrix")
mat_sparse <- as(mat,  "sparseMatrix")
c1 <- PrecondCG(covmat_sparse, X[,1], mat_sparse)
c2 <- PrecondCG(covmat_sparse, X[,2], mat_sparse)
c3 <- PrecondCG(covmat_sparse, X[,3], mat_sparse)
c4 <- PrecondCG(covmat_sparse, X[,4], mat_sparse)
W <- cbind(c1, c2, c3, c4)
b <- solve(t(X) %*% W) %*% t(W) %*% y
b
# mat <- matrix(0, nrow = nrow(covmat), ncol = ncol(covmat))
# for (i in 0:39) {
#    ind_1 <- (i * 100 + 1)
#    ind_2 <- ind_1 + 99
#    mat[ind_1:ind_2, ind_1:ind_2] <- solve(covmat[ind_1:ind_2, ind_1:ind_2])
# }
n <- nrow(covmat)
block_size <- 100
num_blocks <- ceiling(n / block_size)
mat <- matrix(0, nrow = n, ncol = n)
for (i in 1:num_blocks) {
start_idx <- (i - 1) * block_size + 1
end_idx <- min(i * block_size, n)
block <- solve(covmat[start_idx:end_idx, start_idx:end_idx])
mat[start_idx:end_idx, start_idx:end_idx] <- block
}
mat[1:5,1:5]
PrecondCG <- function(A, b, mat) {
n <- ncol(A)
x <- rep(0, n)
r <- b - A %*% x
z <- solve(mat, r)
p <- z
count <- 0
mat_inv <- solve(mat)
for (i in 1:n) {
count <- count + 1
Ap <- A %*% p
alpha <- crossprod(r, z) / crossprod(Ap, p)
x <- x + alpha[1] * p
r_old <- r
r <- r - alpha[1] * Ap
rs <- crossprod(r, r)[1,1]
if (rs < 10^-12) {
print(count)
break
}
z_old <- z
z <- mat_inv %*% r
b <- (t(r) %*% z) / (t(r_old) %*% z_old)
p <- z + b[1] * p
}
return(x)
}
library(Matrix)
covmat_sparse <- as(covmat,  "sparseMatrix")
mat_sparse <- as(mat,  "sparseMatrix")
c1 <- PrecondCG(covmat_sparse, X[,1], mat_sparse)
c2 <- PrecondCG(covmat_sparse, X[,2], mat_sparse)
install.packages("devtools")
install.packages("roxygen2")
setwd("G:/Other computers/My PC/Desktop/Cornell/Classes/Current/STSCI 4520/StormR")
devtools::create("StormR")
use_mit_license()
devtools::use_mit_license()
roxygen2::use_mit_license()
usethis::use_mit_license()
usethis::use_vignette()
usethis::use_vignette("HURDAT Analysis")
usethis::use_vignette("Analysis")
