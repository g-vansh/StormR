knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("airline_2019-07-01.csv")
nrow(dat)
ncol(dat)
head(dat)
dim(dat)
str(dat)
dat[dat$Tail_Number == "303NV",]
path <- tail303NV[order(as.Date(tail303NV$FlightDate, format = "%Y-%m-%d"), as.numeric(tail303NV$DepTime)),]
tail303NV <- dat[dat$Tail_Number == "303NV",]
tail303NV
path <- tail303NV[order(as.Date(tail303NV$FlightDate, format = "%Y-%m-%d"), as.numeric(tail303NV$DepTime)),]
pathOrder <- c(path$Origin[1], path$Dest)
pathOrder
subset <- subset[order(subset$DepTime),]
dates <- as.Date(tail303NV$FlightDate, format = "%Y-%m-%d")
times <- as.numeric(tail303NV$DepTime)
path <- tail303NV[order(dates,times),]
path[, c("Origin", "Dest", "DepTime")]
dates <- as.Date(tail303NV$FlightDate, format = "%Y-%m-%d")
times <- as.numeric(tail303NV$DepTime)
path <- tail303NV[order(dates,times),]
path[, c("Origin", "Dest", "dates", "DepTime")]
dates <- as.Date(tail303NV$FlightDate, format = "%Y-%m-%d")
times <- as.numeric(tail303NV$DepTime)
path <- tail303NV[order(dates,times),]
path[, c("Origin", "Dest", "FlightDate", "DepTime")]
dates <- as.Date(tail303NV$FlightDate, format = "%Y-%m-%d")
times <- as.numeric(tail303NV$DepTime)
path <- tail303NV[order(dates,times),]
path[, c("Origin", "Dest", "DepTime")]
path[c("Origin", "Dest", "DepTime")]
?i
?i
?I
?I()
knitr::opts_chunk$set(echo = TRUE)
# read in the raw data
dat <- read.csv("hurdat2-1851-2021-041922.txt", header= FALSE)
# initialize the processed dataset
hurdat <- data.frame( matrix(NA, 0, ncol(dat)+1) )
colnames(hurdat) <- c("date", colnames(dat))
# counter for the row of hurdat
k <- 0
# loop over rows of raw dataset
for(j in 1:nrow(dat)){
# extract the current row of raw data
this_row <- dat[j,]
# check whether this is a code row
if( substr( this_row[1,1], 1, 2 ) == "AL" ){
# if so, update the hurricane code
hur_code <- this_row[1,1]
} else {
# otherwise update the counter and write to the next row
k <- k + 1
hurdat[k,] <- cbind( hur_code, this_row )
}
}
knitr::opts_chunk$set(echo = TRUE)
# subsetting atomic vectors, matrices, and arrays
# subsetting lists and data frames
# atomic vectors
a <- c(1, 4, 9, 16)
a
a[3]
a[c(3,4)]
a[c(4,3)]
a[c(1,1,2,2,3)]
a[c(-1,-2)]
a[c(-1,2)]
# subsetting atomic vectors, matrices, and arrays
# subsetting lists and data frames
# atomic vectors
a <- c(1, 4, 9, 16)
a
a[3]
a[c(3,4)]
a[c(4,3)]
a[c(1,1,2,2,3)]
a[c(-1,-2)]
a[c(-1,2)]
# subsetting atomic vectors, matrices, and arrays
# subsetting lists and data frames
# atomic vectors
a <- c(1, 4, 9, 16)
a
a[3]
a[c(3,4)]
a[c(4,3)]
a[c(1,1,2,2,3)]
a[c(-1,-2)]
a[c(-1,-2)]
a[6]
a[c(3,NA)]
# subsetting atomic vectors, matrices, and arrays
# subsetting lists and data frames
# atomic vectors
a <- c(1, 4, 9, 16)
a
a[3]
a[c(3,4)]
a[c(4,3)]
a[c(1,1,2,2,3)]
a[c(-1,-2)]
a[c(-1,2)]
a[c(-1, 2)]
# subsetting atomic vectors, matrices, and arrays
# subsetting lists and data frames
# atomic vectors
a <- c(1, 4, 9, 16)
a
a[3]
a[c(3,4)]
a[c(4,3)]
a[c(1,1,2,2,3)]
a[c(-1,-2)]
a[c(-1, 2)]
# subsetting atomic vectors, matrices, and arrays
# subsetting lists and data frames
# atomic vectors
a <- c(1, 4, 9, 16)
a
a[3]
a[c(3,4)]
a[c(4,3)]
a[c(1,1,2,2,3)]
a[c(-1,-2)] #Returns A with the first and second indices removed
#a[c(-1, 2)] #Can't mix negative and positive indices, ERROR
a[6] #Index not in range, outputs NA
a[c(3,NA)]
# named atomic vectors
b <- c( e = exp(1), pi = pi, tau = 2*pi )
#left side is name and right side is the actual value
b
b[1]
b["e"] #Names can do subsetting
b[c("pi","e")]
b[c("pi",3)]
# why doesn't the last one work?
# logical subsetting
b > 4
b[ b > 4 ]
b[TRUE]
b[c(TRUE,FALSE)]
which( c(TRUE,FALSE,TRUE) )
which( b > 4 )
b[ which(b>4) ]
# logical subsetting
b > 4
b[ b > 4 ]
b[TRUE] #Returns entries of B for which logical vector is true.
b[c(TRUE,FALSE)]
which( c(TRUE,FALSE,TRUE) )
which( b > 4 )
b[ which(b>4) ]
# logical subsetting
b > 4
b[ b > 4 ]
b[TRUE] #Returns entries of B for which logical vector is true.
b[c(TRUE,FALSE)]
which( c(TRUE,FALSE,TRUE) )
which( b > 4 )
b[ which(b>4) ]
# logical subsetting
b
b > 4
b[ b > 4 ]
b[TRUE] #Returns entries of B for which logical vector is true.
b[c(TRUE,FALSE)]
which( c(TRUE,FALSE,TRUE) )
which( b > 4 )
b[ which(b>4) ]
# which vs logical when vector contains missing values
b <- c(b,NA)
b > 4
b[ b > 4 ]
which(b>4)
b[ which(b>4) ]
# which vs logical when vector contains missing values
b <- c(b,NA)
b
b > 4
b[ b > 4 ]
which(b>4)
b[ which(b>4) ]
# which vs logical when vector contains missing values
b <- c(b,NA)
b
b > 4
b[ b > 4 ]
which(b>4)
b[ which(b>4) ]
# which vs logical when vector contains missing values
b <- c(b,NA)
b
b > 4
b[ b > 4 ]
which(b>4)
b[ which(b>4) ]
# logical subsetting
b
b > 4
b[ b > 4 ]
b[TRUE] #Returns entries of B for which logical vector is true.
b[c(TRUE,FALSE)] #Recycles back to True, keeps doing true false true false
which( c(TRUE,FALSE,TRUE) )
which( b > 4 ) #Only 3rd element is greater than 4
b[ which(b>4) ] #basically same as b[b>4]
# subsetting atomic vectors, matrices, and arrays
# subsetting lists and data frames
# atomic vectors
a <- c(1, 4, 9, 16)
a
a[3]
a[c(3,4)]
a[c(4,3)]
a[c(1,1,2,2,3)]
a[c(-1,-2)] #Returns A with the first and second indices removed
#a[c(-1, 2)] #Can't mix negative and positive indices, ERROR
a[6] #Index not in range, outputs NA
a[c(3,NA)] #Returns NA for NA index
# named atomic vectors
b <- c( e = exp(1), pi = pi, tau = 2*pi )
#left side is name and right side is the actual value
b
b[1]
b["e"] #Names can do subsetting
b[c("pi","e")]
b[c("pi",3)]
# why doesn't the last one work? Coerces 3 to the character "3" and there is no variable with this name
# logical subsetting
b
b > 4
b[ b > 4 ]
b[TRUE] #Returns entries of B for which logical vector is true.
b[c(TRUE,FALSE)] #Recycles back to True, keeps doing true false true false
which( c(TRUE,FALSE,TRUE) )
which( b > 4 ) #Only 3rd element is greater than 4
b[ which(b>4) ] #basically same as b[b>4]
# which vs logical when vector contains missing values
b <- c(b,NA)
b
b > 4
b[ b > 4 ]
which(b>4)
b[ which(b>4) ]
# which vs logical when vector contains missing values
b <- c( e = exp(1), pi = pi, tau = 2*pi )
b <- c(b,NA)
b
b > 4
b[ b > 4 ]
which(b>4)
b[ which(b>4) ]
# matrices
m <- outer( 1:4, 0.01*(1:3), "+" )
m
m[1,2]
m[1:2,2]
m[1:3,2]
m[1:3,2:3]
m[,2]
m[4,]
# be vigilant about R's automatic coercion to vectors
m[,2,drop=FALSE]
m[4,,drop=FALSE]
?outer
# matrices
m <- outer( 1:4, 0.01*(1:3), "/" )
m
m[1,2]
m[1:2,2]
m[1:3,2]
m[1:3,2:3]
m[,2]
m[4,]
# be vigilant about R's automatic coercion to vectors
m[,2,drop=FALSE]
m[4,,drop=FALSE]
# treating matrix as a vector
m
m[5]
m[c(1,6,11)]
m[-2]
m > 4
m[ m > 4 ]
# treating matrix as a vector
m
m[5] #"fifth element" of the matrix
m[c(1,6,11)]
m[-2] #all elements except the 200
m > 4
m[ m > 200 ]
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
# # EXAMPLE CODE:
page <- read_html("https://www.ssa.gov/oact/babynames/numberUSbirths.html")
## Hurricane data
```{r}
# read in the raw data
dat <- read.csv("hurdat2-1851-2021-041922.txt", header= FALSE)
page
print(page)
# # EXAMPLE CODE:
page <- read_html("https://www.aoml.noaa.gov/hrd/hurdat/hurdat2.html")
?read_html
library(textreadr)
install.packages(textreadr)
library(xm12)
library(xml2)
install.packages("xml2")
# # EXAMPLE CODE:
page <- read_html("https://www.aoml.noaa.gov/hrd/hurdat/hurdat2.html")
install.packages("xml2")
ssa <- page %>% html_nodes("table") %>% .[[2]] %>% html_table() %>% tbl_df()
# ssa <- page %>% html_nodes("table") %>% .[[2]] %>% html_table() %>% tbl_df()
page
page
dat <- read.csv("hurdat2-1851-2021-041922.txt", header= FALSE)
library(usethis)
library(xml2)
dat <- read.csv("hurdat2-1851-2021-041922.txt", header= FALSE)
dat <- read.csv("hurdat2-1851-2021-041922.txt", header= FALSE)
setwd("C:/Users/terre/Documents/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw")
# ssa <- page %>% html_nodes("table") %>% .[[2]] %>% html_table() %>% tbl_df()
# ssa <- page %>% html_nodes("table") %>% .[[2]] %>% html_table() %>% tbl_df()
# names(ssa) <- c("year", "M", "F", "total")
# ssa <- page %>% html_nodes("table") %>% .[[2]] %>% html_table() %>% tbl_df()
# names(ssa) <- c("year", "M", "F", "total")
# ssa$total <- NULL
# ssa <- page %>% html_nodes("table") %>% .[[2]] %>% html_table() %>% tbl_df()
# names(ssa) <- c("year", "M", "F", "total")
# ssa$total <- NULL
#
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
View(page)
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
dat
dat <- read.csv("hurdat2-1851-2021-041922.txt", header= FALSE)
dat <- read.csv("hurdat2-1851-2021-041922.txt", header= FALSE)
dat
head(dat)
# read in the raw data
dat <- read.csv("hurdat2-1851-2021-041922.txt", header= FALSE)
# read in the raw data
dat <- read.csv("hurdat2-1851-2021-041922.txt", header= FALSE)
# initialize the processed dataset
hurdat <- data.frame( matrix(NA, 0, ncol(dat)+1) )
colnames(hurdat) <- c("date", colnames(dat))
# counter for the row of hurdat
k <- 0
# loop over rows of raw dataset
for(j in 1:nrow(dat)){
# extract the current row of raw data
this_row <- dat[j,]
# check whether this is a code row
if( substr( this_row[1,1], 1, 2 ) == "AL" ){
# if so, update the hurricane code
hur_code <- this_row[1,1]
} else {
# otherwise update the counter and write to the next row
k <- k + 1
hurdat[k,] <- cbind( hur_code, this_row )
}
}
#create a function that loops through the row and processes the row
loop_row <- function(this_row, hurricane){
if( substr(this_row[1], 1, 2) == "AL"){
hurricane <<- this_row[1]
return(NULL)
} else{
return(c(hurricane, this_row))
}
}
#apply loop row function to each row
hurdat <- do.call(rbind, lapply(1:nrow(dat), function(j) { loop_row(dat[j,], hurricane)
}))
colnames(hurdat) <- c("date", colnames(dat))
head(hurdat)
head(dat)
?matrix
dat[1,]
dat[1,][1,1]
dat[1,]
dat[1,][1,2]
dat[1,][1,3]
gsub("\\s+", "", dat[1,][1,3])
gsub("\\s+", "", dat[1,][1,2])
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
View(hurdat)
View(dat)
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# read in the raw data
dat <- read.csv("hurdat2-1851-2021-041922.txt", header= FALSE)
# initialize the processed dataset
hurdat <- data.frame( matrix(NA, 0, ncol(dat)+1) )
colnames(hurdat) <- c("date", colnames(dat))
# counter for the row of hurdat
k <- 0
# loop over rows of raw dataset
for(j in 1:nrow(dat)){
# extract the current row of raw data
this_row <- dat[j,]
# check whether this is a code row
if( substr( this_row[1,1], 1, 2 ) == "AL" ){
# if so, update the hurricane code
hur_code <- this_row[1,1]
} else {
# otherwise update the counter and write to the next row
k <- k + 1
hurdat[k,] <- cbind( hur_code, this_row )
}
}
View(hurdat)
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
hurdat$Latitude[2]
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
View(hurdat)
hurdat[1,1]
hurdat[1,5]
is.na(hurdat[1,5])
is.na("")
is.na()
is.na(0)
is.na(NA)
hurdat[1,5]
gsub("\\s", "", hurdat[1,5])
is.na(gsub("\\s", "", hurdat[1,5]))
nchar(gsub("\\s", "", hurdat[1,5]))==0
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
source("~/Spring 2023/STSCI 4520/FINAL PROJECT REPOSITORY/StormR/data-raw/DATASET.R", echo=TRUE)
write.csv(DATASET, "data-raw/DATASET.csv")
write.csv(hurdat, "data-raw/DATASEt.csv")
write.csv(hurdat, "data-raw/DATASET.csv")
write.csv(hurdat, "data-raw/DATASEt.csv")
write.csv(hurdat, "DATASET.csv")
usethis::use_data(hurdat, overwrite = TRUE)
